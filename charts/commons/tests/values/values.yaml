global:
  timezone: Europe/Paris
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  pvc:
    storage:
      size: 1Gi
      storageClassName: test
  ingress:
    className: traefik
  rbac:
    enabled: true
    clusterRoleName: homepage
    serviceAccountName: homepage
    rules:
      - apiGroups:
          - ''
        resources:
          - namespaces
          - pods
          - nodes
        verbs:
          - get
          - list
      - apiGroups:
          - extensions
          - networking.k8s.io
        resources:
          - ingresses
        verbs:
          - get
          - list
      - apiGroups:
          - traefik.io
        resources:
          - ingressroutes
        verbs:
          - get
          - list
      - apiGroups:
          - gateway.networking.k8s.io
        resources:
          - httproutes
          - gateways
        verbs:
          - get
          - list
      - apiGroups:
          - metrics.k8s.io
        resources:
          - nodes
          - pods
        verbs:
          - get
          - list
components:
  - name: nginx
    cronjob:
      schedule: '0 3 * * *'
      successfulJobsHistoryLimit: 3
      failedJobsHistoryLimit: 1
      env:
        - name: ENV
          value: prod
      image:
        repository: nginx
        tag: latest
      
    deployment:
      replicas: 2
      initContainers:
        - name: setup-volume
          image:
            repository: alpine
          command:
            - sh
            - '-c'
            - |
              echo "Préparation du volume..."
              mkdir -p /data
              chown -R 1000:1000 /data
              echo "Volume prêt."
      image:
        repository: nginx
        tag: latest
      additionalsPorts:
        - name: http2
          containerPort: 8080
      env:
        - name: ENV
          value: prod
        - name: POSTGRES_USERNAME
          value: __components__postgres__username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: __components__postgres__password_secret
              key: password
      livenessProbe:
        httpGet:
          path: /health
          port: 8080
        initialDelaySeconds: 10
        periodSeconds: 5
      readinessProbe:
        httpGet:
          path: /ready
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 3
      startupProbe:
        httpGet:
          path: /startup
          port: 8080
        failureThreshold: 30
        periodSeconds: 10
      volumeMounts:
        - name: config
          mountPath: /etc/config
          subPath: data
      volumes:
        - name: data
          pvc:
            name: data-pvc
            storage:
              accessMode: ReadWriteOnce
              size: 1Gi
              storageClassName: local-path
        - name: data-2
          pvc:
            name: data-2-pvc
            useExisting: false
            storage:
              accessMode: ReadWriteOnce
              size: 2Gi
              storageClassName: local-path
        - name: config
          configMap:
            data:
              config.yaml: 'key: value'
              toto.sh: |-
                #!/bin/sh
                echo "toto"
    service:
      type: ClusterIP
      annotations:
        metallb.universe.tf/address-pool: default
        prometheus.io/scrape: 'true'
      ports:
        - name: http
          port: 80
          targetPort: 80
    ingress:
      enabled: true
      className: traefik
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      hosts:
        - host: web.mondomaine.local
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - web.mondomaine.local
          secretName: web-cert
    postgres:
      enabled: true
      image:
        tag: 16
      storage:
        size: 1Gi
        storageClassName: local-path
      cluster:
        username: changeme
        password: changeme
      postInitTemplateSQL:
        - CREATE EXTENSION postgis;
        - CREATE EXTENSION postgis_topology;
        - CREATE EXTENSION fuzzystrmatch;
        - CREATE EXTENSION postgis_tiger_geocoder;
addons:
  vscode:
    enabled: true
    image:
      tag: 4.104.2
    service:
      port: 8080
    volumes:
      - name: "toto"
        pvc:
          name: __nginx__pvc__data-2-pvc
    ingress:
      enabled: false
  redis:
    enabled: true
    name: redis
    image:
      repository: redis
      tag: 8.2.1
    port: 6379
    password: changeme
  pgadmin:
    enabled: true
  postgres:
    enabled: true
    image:
      repository: ghcr.io/cloudnative-pg/postgresql
      tag: 16
    storage:
      size: 1Gi
      storageClassName: test
    cluster:
      username: changeme
      password: changeme
