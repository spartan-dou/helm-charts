{{- if .Values.sonarr.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "servarr.fullname" . }}-sonarr
  labels:
    {{- include "servarr.labels" . | nindent 4 }}
    app.kubernetes.io/component: sonarr
spec:
  replicas: {{ .Values.sonarr.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      {{- include "servarr.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: sonarr
  template:
    metadata:
      labels:
        {{- include "servarr.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: sonarr
    spec:
      securityContext:
        fsGroup: 1000
      serviceAccountName: {{ include "servarr.serviceAccountName" . }}
      {{- if .Values.postgresql.enabled }}
      initContainers:
        - name: check-db-ready
          image: bitnami/postgresql:16
          command: ['sh', '-c', 'until pg_isready -d sonarr_main -U sonarr -h {{ .Release.Name }}-cnpg-rw; do echo waiting for database; sleep 2; done;']
        - name: init-config
          image: busybox
          command: ['sh', '-c', 'cp /tmp/config.xml /config/config.xml && chown -R 1000:1000 /config']
          volumeMounts:
            - name: config-volume
              mountPath: /tmp
            - name: sonarr-config
              mountPath: /config
      {{- end }}
      containers:
        - name: sonarr
          image: "{{ .Values.sonarr.image.repository }}:{{ .Values.sonarr.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: sonarr
              containerPort: {{ .Values.sonarr.port }}
              protocol: TCP
          env:
            {{- range .Values.sonarr.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          livenessProbe:
            {{- toYaml .Values.sonarr.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.sonarr.readinessProbe | nindent 12 }}
          volumeMounts:
            - name: sonarr-config
              mountPath: /config
            {{- with .Values.sonarr.data }}
            - name: sonarr-data
              mountPath: {{ .path }}
            {{- end }}
      volumes:
        - name: sonarr-config
          {{- if .Values.sonarr.persistence.enabled }}
          persistentVolumeClaim:
            claimName: sonarr-pvc-config
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- with .Values.sonarr.data }}
        - name: sonarr-data
          hostPath: 
            path: {{ .hostPath }}
            type: Directory
        {{- end }}
        {{- if .Values.postgresql.enabled }}
        - name: config-volume
          configMap:
            name: config-sonarr
        {{- end }}
      {{- with .Values.sonarr.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sonarr.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sonarr.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
